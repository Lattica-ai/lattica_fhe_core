// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: serialization/generic.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_serialization_2fgeneric_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_serialization_2fgeneric_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_serialization_2fgeneric_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_serialization_2fgeneric_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_serialization_2fgeneric_2eproto;
namespace lattica_proto {
class BigInt;
struct BigIntDefaultTypeInternal;
extern BigIntDefaultTypeInternal _BigInt_default_instance_;
class Complex;
struct ComplexDefaultTypeInternal;
extern ComplexDefaultTypeInternal _Complex_default_instance_;
class TensorHolder;
struct TensorHolderDefaultTypeInternal;
extern TensorHolderDefaultTypeInternal _TensorHolder_default_instance_;
}  // namespace lattica_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace lattica_proto {
enum DataType : int {
  FLOAT = 0,
  DOUBLE = 1,
  INT32 = 2,
  INT64 = 3,
  BOOL = 4,
  COMPLEX_FLOAT = 5,
  COMPLEX_DOUBLE = 6,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataType_IsValid(int value);
extern const uint32_t DataType_internal_data_[];
constexpr DataType DataType_MIN = static_cast<DataType>(0);
constexpr DataType DataType_MAX = static_cast<DataType>(6);
constexpr int DataType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
DataType_descriptor();
template <typename T>
const std::string& DataType_Name(T value) {
  static_assert(std::is_same<T, DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return DataType_Name(static_cast<DataType>(value));
}
template <>
inline const std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool DataType_Parse(absl::string_view name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
      DataType_descriptor(), name, value);
}
enum AuxKeyType : int {
  BASE_KEY = 0,
  FULL_KEY = 1,
  IDENTITY_KEY = 2,
  SQUARE_KEY = 3,
  AuxKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuxKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuxKeyType_IsValid(int value);
extern const uint32_t AuxKeyType_internal_data_[];
constexpr AuxKeyType AuxKeyType_MIN = static_cast<AuxKeyType>(0);
constexpr AuxKeyType AuxKeyType_MAX = static_cast<AuxKeyType>(3);
constexpr int AuxKeyType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AuxKeyType_descriptor();
template <typename T>
const std::string& AuxKeyType_Name(T value) {
  static_assert(std::is_same<T, AuxKeyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuxKeyType_Name().");
  return AuxKeyType_Name(static_cast<AuxKeyType>(value));
}
template <>
inline const std::string& AuxKeyType_Name(AuxKeyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuxKeyType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuxKeyType_Parse(absl::string_view name, AuxKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuxKeyType>(
      AuxKeyType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TensorHolder final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lattica_proto.TensorHolder) */ {
 public:
  inline TensorHolder() : TensorHolder(nullptr) {}
  ~TensorHolder() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TensorHolder(
      ::google::protobuf::internal::ConstantInitialized);

  inline TensorHolder(const TensorHolder& from) : TensorHolder(nullptr, from) {}
  inline TensorHolder(TensorHolder&& from) noexcept
      : TensorHolder(nullptr, std::move(from)) {}
  inline TensorHolder& operator=(const TensorHolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorHolder& operator=(TensorHolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorHolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorHolder* internal_default_instance() {
    return reinterpret_cast<const TensorHolder*>(
        &_TensorHolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TensorHolder& a, TensorHolder& b) { a.Swap(&b); }
  inline void Swap(TensorHolder* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorHolder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorHolder* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TensorHolder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TensorHolder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TensorHolder& from) { TensorHolder::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TensorHolder* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lattica_proto.TensorHolder"; }

 protected:
  explicit TensorHolder(::google::protobuf::Arena* arena);
  TensorHolder(::google::protobuf::Arena* arena, const TensorHolder& from);
  TensorHolder(::google::protobuf::Arena* arena, TensorHolder&& from) noexcept
      : TensorHolder(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSizesFieldNumber = 1,
    kStridesFieldNumber = 2,
    kDataFieldNumber = 3,
    kDtypeFieldNumber = 4,
  };
  // repeated int64 sizes = 1;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;

  public:
  void clear_sizes() ;
  ::int64_t sizes(int index) const;
  void set_sizes(int index, ::int64_t value);
  void add_sizes(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& sizes() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_sizes();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_sizes() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_sizes();

  public:
  // repeated int64 strides = 2;
  int strides_size() const;
  private:
  int _internal_strides_size() const;

  public:
  void clear_strides() ;
  ::int64_t strides(int index) const;
  void set_strides(int index, ::int64_t value);
  void add_strides(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& strides() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_strides();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_strides() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_strides();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .lattica_proto.DataType dtype = 4;
  void clear_dtype() ;
  ::lattica_proto::DataType dtype() const;
  void set_dtype(::lattica_proto::DataType value);

  private:
  ::lattica_proto::DataType _internal_dtype() const;
  void _internal_set_dtype(::lattica_proto::DataType value);

  public:
  // @@protoc_insertion_point(class_scope:lattica_proto.TensorHolder)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TensorHolder_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TensorHolder& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> sizes_;
    mutable ::google::protobuf::internal::CachedSize _sizes_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> strides_;
    mutable ::google::protobuf::internal::CachedSize _strides_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    int dtype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2fgeneric_2eproto;
};
// -------------------------------------------------------------------

class Complex final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lattica_proto.Complex) */ {
 public:
  inline Complex() : Complex(nullptr) {}
  ~Complex() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Complex(
      ::google::protobuf::internal::ConstantInitialized);

  inline Complex(const Complex& from) : Complex(nullptr, from) {}
  inline Complex(Complex&& from) noexcept
      : Complex(nullptr, std::move(from)) {}
  inline Complex& operator=(const Complex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Complex& operator=(Complex&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Complex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Complex* internal_default_instance() {
    return reinterpret_cast<const Complex*>(
        &_Complex_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Complex& a, Complex& b) { a.Swap(&b); }
  inline void Swap(Complex* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Complex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Complex* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Complex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Complex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Complex& from) { Complex::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Complex* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lattica_proto.Complex"; }

 protected:
  explicit Complex(::google::protobuf::Arena* arena);
  Complex(::google::protobuf::Arena* arena, const Complex& from);
  Complex(::google::protobuf::Arena* arena, Complex&& from) noexcept
      : Complex(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRealFieldNumber = 1,
    kImagFieldNumber = 2,
  };
  // double real = 1;
  void clear_real() ;
  double real() const;
  void set_real(double value);

  private:
  double _internal_real() const;
  void _internal_set_real(double value);

  public:
  // double imag = 2;
  void clear_imag() ;
  double imag() const;
  void set_imag(double value);

  private:
  double _internal_imag() const;
  void _internal_set_imag(double value);

  public:
  // @@protoc_insertion_point(class_scope:lattica_proto.Complex)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Complex_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Complex& from_msg);
    double real_;
    double imag_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2fgeneric_2eproto;
};
// -------------------------------------------------------------------

class BigInt final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lattica_proto.BigInt) */ {
 public:
  inline BigInt() : BigInt(nullptr) {}
  ~BigInt() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BigInt(
      ::google::protobuf::internal::ConstantInitialized);

  inline BigInt(const BigInt& from) : BigInt(nullptr, from) {}
  inline BigInt(BigInt&& from) noexcept
      : BigInt(nullptr, std::move(from)) {}
  inline BigInt& operator=(const BigInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigInt& operator=(BigInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigInt* internal_default_instance() {
    return reinterpret_cast<const BigInt*>(
        &_BigInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BigInt& a, BigInt& b) { a.Swap(&b); }
  inline void Swap(BigInt* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigInt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigInt* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BigInt>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BigInt& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BigInt& from) { BigInt::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BigInt* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lattica_proto.BigInt"; }

 protected:
  explicit BigInt(::google::protobuf::Arena* arena);
  BigInt(::google::protobuf::Arena* arena, const BigInt& from);
  BigInt(::google::protobuf::Arena* arena, BigInt&& from) noexcept
      : BigInt(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:lattica_proto.BigInt)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BigInt_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BigInt& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2fgeneric_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TensorHolder

// repeated int64 sizes = 1;
inline int TensorHolder::_internal_sizes_size() const {
  return _internal_sizes().size();
}
inline int TensorHolder::sizes_size() const {
  return _internal_sizes_size();
}
inline void TensorHolder::clear_sizes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sizes_.Clear();
}
inline ::int64_t TensorHolder::sizes(int index) const {
  // @@protoc_insertion_point(field_get:lattica_proto.TensorHolder.sizes)
  return _internal_sizes().Get(index);
}
inline void TensorHolder::set_sizes(int index, ::int64_t value) {
  _internal_mutable_sizes()->Set(index, value);
  // @@protoc_insertion_point(field_set:lattica_proto.TensorHolder.sizes)
}
inline void TensorHolder::add_sizes(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_sizes()->Add(value);
  // @@protoc_insertion_point(field_add:lattica_proto.TensorHolder.sizes)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TensorHolder::sizes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lattica_proto.TensorHolder.sizes)
  return _internal_sizes();
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorHolder::mutable_sizes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lattica_proto.TensorHolder.sizes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sizes();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
TensorHolder::_internal_sizes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sizes_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorHolder::_internal_mutable_sizes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sizes_;
}

// repeated int64 strides = 2;
inline int TensorHolder::_internal_strides_size() const {
  return _internal_strides().size();
}
inline int TensorHolder::strides_size() const {
  return _internal_strides_size();
}
inline void TensorHolder::clear_strides() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strides_.Clear();
}
inline ::int64_t TensorHolder::strides(int index) const {
  // @@protoc_insertion_point(field_get:lattica_proto.TensorHolder.strides)
  return _internal_strides().Get(index);
}
inline void TensorHolder::set_strides(int index, ::int64_t value) {
  _internal_mutable_strides()->Set(index, value);
  // @@protoc_insertion_point(field_set:lattica_proto.TensorHolder.strides)
}
inline void TensorHolder::add_strides(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strides()->Add(value);
  // @@protoc_insertion_point(field_add:lattica_proto.TensorHolder.strides)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TensorHolder::strides() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:lattica_proto.TensorHolder.strides)
  return _internal_strides();
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorHolder::mutable_strides()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:lattica_proto.TensorHolder.strides)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_strides();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
TensorHolder::_internal_strides() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strides_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorHolder::_internal_mutable_strides() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.strides_;
}

// bytes data = 3;
inline void TensorHolder::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TensorHolder::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lattica_proto.TensorHolder.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TensorHolder::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lattica_proto.TensorHolder.data)
}
inline std::string* TensorHolder::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:lattica_proto.TensorHolder.data)
  return _s;
}
inline const std::string& TensorHolder::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void TensorHolder::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* TensorHolder::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* TensorHolder::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lattica_proto.TensorHolder.data)
  return _impl_.data_.Release();
}
inline void TensorHolder::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lattica_proto.TensorHolder.data)
}

// .lattica_proto.DataType dtype = 4;
inline void TensorHolder::clear_dtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = 0;
}
inline ::lattica_proto::DataType TensorHolder::dtype() const {
  // @@protoc_insertion_point(field_get:lattica_proto.TensorHolder.dtype)
  return _internal_dtype();
}
inline void TensorHolder::set_dtype(::lattica_proto::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:lattica_proto.TensorHolder.dtype)
}
inline ::lattica_proto::DataType TensorHolder::_internal_dtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::lattica_proto::DataType>(_impl_.dtype_);
}
inline void TensorHolder::_internal_set_dtype(::lattica_proto::DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dtype_ = value;
}

// -------------------------------------------------------------------

// BigInt

// string data = 1;
inline void BigInt::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BigInt::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lattica_proto.BigInt.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BigInt::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lattica_proto.BigInt.data)
}
inline std::string* BigInt::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:lattica_proto.BigInt.data)
  return _s;
}
inline const std::string& BigInt::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void BigInt::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* BigInt::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* BigInt::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:lattica_proto.BigInt.data)
  return _impl_.data_.Release();
}
inline void BigInt::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lattica_proto.BigInt.data)
}

// -------------------------------------------------------------------

// Complex

// double real = 1;
inline void Complex::clear_real() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.real_ = 0;
}
inline double Complex::real() const {
  // @@protoc_insertion_point(field_get:lattica_proto.Complex.real)
  return _internal_real();
}
inline void Complex::set_real(double value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:lattica_proto.Complex.real)
}
inline double Complex::_internal_real() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.real_;
}
inline void Complex::_internal_set_real(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.real_ = value;
}

// double imag = 2;
inline void Complex::clear_imag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imag_ = 0;
}
inline double Complex::imag() const {
  // @@protoc_insertion_point(field_get:lattica_proto.Complex.imag)
  return _internal_imag();
}
inline void Complex::set_imag(double value) {
  _internal_set_imag(value);
  // @@protoc_insertion_point(field_set:lattica_proto.Complex.imag)
}
inline double Complex::_internal_imag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.imag_;
}
inline void Complex::_internal_set_imag(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imag_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lattica_proto


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::lattica_proto::DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lattica_proto::DataType>() {
  return ::lattica_proto::DataType_descriptor();
}
template <>
struct is_proto_enum<::lattica_proto::AuxKeyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::lattica_proto::AuxKeyType>() {
  return ::lattica_proto::AuxKeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_serialization_2fgeneric_2eproto_2epb_2eh
